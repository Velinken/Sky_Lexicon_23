package com.dinadurykina.skylexicon.ui.about
/**
 * Container for a name and a nickname strings.
 * Used to demonstrate data binding.
 */
data class MyName(var name: String = "", var nickname: String = "")
/*
Привязка данных - идея
Основная идея привязки данных заключается в создании объекта, который соединяет / отображает / связывает две части удаленной информации во время компиляции, чтобы вам не приходилось искать ее во время выполнения.
Объект, который связывает вас с этими привязками, называется объектом привязки. Он создан компилятором, и хотя интересно понять, как он работает, все же нет необходимости знать об основных видах использования привязки данных.
Привязка данных и findViewById
findViewById - это дорогостоящая операция, поскольку она пересекает иерархию представлений при каждом вызове.
При включенном связывании данных компилятор создает ссылки на все представления в a, <layout>которые имеют идентификатор, и собирает их в объекте Binding.
В своем коде вы создаете экземпляр объекта привязки, а затем ссылаетесь на представления через объект привязки без дополнительных затрат.

Представления привязки данных и данные
Обновление данных, а затем обновление данных, отображаемых в представлениях, является обременительным и источником ошибок. Хранение данных в представлении также нарушает разделение данных и представление.
Привязка данных решает обе эти проблемы. Вы храните данные в классе данных. Вы добавляете <data>блок в, <layout>чтобы идентифицировать данные как переменные для использования с представлениями. Представления ссылаются на переменные.
Компилятор генерирует объект привязки, который связывает представления и данные.
В своем коде вы ссылаетесь и обновляете данные через объект привязки, который обновляет данные и, следовательно, то, что отображается в представлении.
Привязка представлений к данным устанавливает основу для более продвинутых методов, использующих привязку данных.

В этом упражнении вы собираетесь улучшить приложение AboutMe, используя привязку данных вместо findViewById, и использовать фактические данные, связанные с представлениями name_text и nickname_text, для отображения информации.

Сделайте следующее:

Включите привязку данных в файле build.gradle в модуле приложения внутри раздела Android:

dataBinding {
enabled = true
}
Оберните все представления в activity_main.xml в <layout>тег и переместите объявления пространства имен в <layout>тег.

В MainActivity создайте объект привязки:
private lateinit var binding: ActivityMainBinding
В onCreate используйте DataBindingUtil, чтобы установить представление содержимого:
binding = DataBindingUtil.setContentView(this, R.layout.activity_main)
Используйте объект привязки для замены всех вызовов findViewById, например:
binding.doneButton.setOnClickListener….etc
Подсказка: вы можете использовать apply () в обработчике кликов, чтобы сделать ваш код более кратким и читабельным.

Создайте класс данных MyName для имени и псевдонима.
data class MyName(var name: String = "", var nickname: String = "")
Добавьте <data>блок в activity_main.xml. Блок данных идет внутри тега макета, но перед тегами просмотра. Внутри блока данных добавьте переменную для класса MyName.
<data>
<!-- Declare a variable by specifying a name and a data type. -->
<!-- Use fully qualified name for the type. -->
<variable
    name="myName"
    type="com.example.android.aboutme.MyName" />
</data>
В name_text, nickname_edit и nickname_text замените ссылки на строковые текстовые ресурсы ссылками на переменные, например>
android:text="@={myName.name}"
В MainActivity создайте экземпляр MyName.
// Instance of MyName data class.
private val myName: MyName = MyName("Aleks Haecky")
И в onCreate () установите привязку к нему.
binding.myName = myName
В addNickname установите значение псевдонима в myName, вызовите invalidateAll (), и данные должны отображаться в ваших представлениях.
myName?.nickname = nicknameEdit.text.toString()
// Invalidate all binding expressions and request a new rebind to refresh UI
invalidateAll()
Когда вы запускаете свой код, он не должен иметь ошибок и выглядеть и работать точно так же!
Если вы хотите начать с этого шага, вы можете загрузить этот код упражнения с: Step.05-Exercise-Implement-data-binding .

Вы найдете множество //TODOкомментариев, которые помогут вам выполнить это упражнение, и если вы застряли, вернитесь и посмотрите видео еще раз.

Когда вы закончите, вы можете проверить свое решение по сравнению с решением, которое мы предоставили здесь Step.05-Solution-Implement-data-binding или используя этот git diff

Теперь ваша очередь заменить findViewById и подключить данные к представлениям. Чтобы выполнить это упражнение, следуйте приведенным ниже инструкциям.

Список заданий

 */